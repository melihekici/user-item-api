from flask import Flask, jsonify, request
from flask_restful import Api, Resource
from pymongo import MongoClient
import bcrypt
import datetime
import jwt
from functools import wraps


app = Flask(__name__)
api = Api(app)

client = MongoClient("mongodb://db:27017")

userDB = client.UserDB

users = userDB['Users']

app.config['JWT_SECRET_KEY'] = "UASdhuiNDIANDa0sdj0wj11j231"

def verifyPW(username, password): #Returns 200 if username-password is verified else return Json
    if(not userExist(username)): # If user does not exist
        return jsonify({
            "status": 401,
            "msg": "Wrong username."
        })
    
    # Get hashed password for the username from database
    hashedPW = users.find({'username':username})[0]['password']
    
    if(bcrypt.hashpw(password.encode('utf8'), hashedPW) == hashedPW): #If the password is correct
        return 200
    else:
        return jsonify({
            "status": 401,
            "msg": "Wrong password"
        })

def tokenRequired(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None # Initialize token to None
        if('access-token' in request.get_json()): # If access-token is passed with the request
            token = request.get_json()['access-token'] # Extract access-token from request and save as token
        
        if(not token): # If token does not exist
            return jsonify({
                "status": 401,
                "msg": "Token is missing"
            })
        
        try: # Try to decode token information and extract username from the token
            tokenData = jwt.decode(token, app.config['JWT_SECRET_KEY'])
            currentUser = tokenData['username']
        except Exception as e: # If unable to do so
            return jsonify({
                "status": 403,
                "msg": "Invalid Token",
            })
        
        return f(currentUser, *args, **kwargs)
    return decorated

def userExist(username): # Returns True or False
    if(users.find({'username':username}).count() == 0): #If username does not exist in database
        return False
    else:
        return True

class Register(Resource):
    def post(self): # Registers the user to the database with POST request
        postedData = request.get_json() # Get posted data as JSON
        dataCheck = self.checkRequest(postedData) # Check if posted data is valid

        if(dataCheck == 200): # If the request is OK
            username = postedData['username']
            password = postedData['password']
        else:
            return dataCheck   # If request is not OK, return the response determined by checkRequest function

        if(userExist(username)): # If the username allready exist in database
            return jsonify({
                "status": 409,
                "msg": "This username is allready taken"
            })
        
        hashedPW = bcrypt.hashpw(password.encode('utf8'), bcrypt.gensalt()) # Hash the posted password

        # Inserting user information to the database
        users.insert({
            'username':username,
            'password':hashedPW,
            'items': [],
        })

        return jsonify({
            "status": 200,
            "msg" : "You have successfuly registered to the API"
        })

    def checkRequest(self,postedData):
        if("username" in postedData and "password" in postedData): # If both username and password is posted with the request
            return 200
        else:
            return jsonify({
                "status": 412,
                "msg": "Username or Password is missing"
            })

class GetItems(Resource):
    @tokenRequired
    def post(currentUser, self): # Post Request to list user Items, Needs access-token as header     
        itemList = users.find({'username':currentUser})[0]['items'] # Find the user from the database using currentUser information that came from decoded token

        return jsonify({
            "status": 200,
            "msg": "Item list has been fetched successfuly.",
            "items": itemList,
            "currentUser":currentUser
        })

class Login(Resource):
    def post(self): # Login the user and return a token
        postedData = request.get_json() # Get posted data from request as JSON

        dataCheck = self.checkRequest(postedData) # Check if the posted data is valid
        if(dataCheck == 200): # If the request is OK
            username = postedData['username']
            password = postedData['password']
        else:
            return dataCheck # If the reques is not OK, send back the JSON generated by checkRequest function

        passwordCheck = verifyPW(username, password) # Check username-password combination
        if(passwordCheck != 200): # If username-password combination is not OK
            return passwordCheck # Return the JSON generated by verifyPW
        
        accessToken = jwt.encode({'username':username}, app.config['JWT_SECRET_KEY']) # Create an access-token using username and secret key

        # Return the token to the user
        return jsonify({
            "status": 200,
            "msg": "You have signed in successfuly.",
            "token" : accessToken.decode('utf8')
        })
    
    def checkRequest(self, postedData):
        if('username' in postedData and 'password' in postedData): # If both username and password exist in request
            return 200
        else: # If one of them is missing
            return jsonify({
                "status": 412,
                "msg": "Username or Password is missing"
            })

class Items(Resource):
    def get(self): # Lists user Items, Needs access-token as URL parameter
        args = request.args # Extract arguments passed from URL
        if(not "access-token" in args): # If access-token argument is not passed with URL
            return jsonify({
                "status": 401,
                "msg": "Token is missing"
            })
        else: # If it is passed, save it as token
            token = args['access-token']
        
        try: # Try to decode the token and extract username from it
            tokenData = jwt.decode(token, app.config['JWT_SECRET_KEY'])
            currentUser = tokenData['username']
        except: # If unable to do so
            return jsonify({
                "status": 403,
                "msg": "Invalid Token",
            })

        itemList = users.find({'username':currentUser})[0]['items'] # Get the list of items of currentUser from database
        
        # Return the list of items of the user to the user
        return jsonify({
            "status": 200,
            "msg": "Item list has been fetched successfuly.",
            "items": itemList,
            "currentUser":currentUser
        })

    @tokenRequired
    def post(currentUser, self): # Lists user Items, Needs access-token as header     
        postedData = request.get_json()
        dataCheck = self.checkPostRequest(postedData)
        
        if(dataCheck == 200): # If the request is OK
            itemName = postedData['name']
            itemCount = postedData['count']
            itemDescription = postedData['description']
        else:
            return dataCheck # If request is not OK, send back the JSON generated by checkPostRequest function

        itemList = users.find({'username':currentUser})[0]['items'] # Get the list of items of currentUser from database
        
        #Check if item is allready exist
        if(next((item for item in itemList if item['name'] == itemName), False)):
            return jsonify({
                "status": 409,
                "msg": "Item is allready exist on the list. If you want to update the item send a PUT request. If you want to delete the item, send a DELETE request"
            })
        
        # Add passed item to the list of items
        itemList.append({
            'name':itemName,
            'count': int(itemCount),
            'description':itemDescription
        })

        # Update user item list with the new list of items
        users.update(
            {'username':currentUser},
            {'$set':{'items': itemList}}
        )

        return jsonify({
            "status": 200,
            "msg": "Item has been added successfuly."
        })
    
    @tokenRequired
    def put(currentUser, self):
        postedData = request.get_json()
        dataCheck = self.checkPutRequest(postedData)
        newItemName = None
        itemCount = None
        itemDescription = None
        
        if(dataCheck == 200): # If the request is OK
            itemName = postedData['name']
        else:
            return dataCheck
        
        if("new-name" in postedData): # If new-name has been passed with the request
            newItemName = postedData['new-name'] # save it as newItemName
        
        if('count' in postedData): # If count has been passed with the request
            itemCount = postedData['count'] # Save it as count

        if('description' in postedData): # If description has been passed with request
            itemDescription = postedData['description'] # Save it as description
        
        itemList = users.find({'username':currentUser})[0]['items'] # Get the list of items of currentUser from database
        
        # Check if item does exist
        if(not next((item for item in itemList if item['name'] == itemName), False)):
            return jsonify({
                "status": 422,
                "msg": "Item doest not exist on the list. If you want to add the item, send a POST request."
            })
        
        # Find the item to be updated from the list of items and update
        for d in itemList:
            if (d['name'] == itemName): # If the current dictionaries name value is equal to the name of the passed item to update
                if(not newItemName is None): # If newItemName is given
                    d.update({'name':newItemName}) # Update the item name

                if(not itemCount is None): # If count value is given with the request
                    d.update({'count':int(itemCount)}) # update the item count

                if(not itemDescription is None): # If description value is given with the request
                    d.update({'description':itemDescription}) # update the description

        # Update the users item list with the new list of items
        users.update(
            {'username':currentUser},
            {'$set':{'items': itemList}}
        )

        return jsonify({
            "status": 200,
            "msg": "Item has been updated successfuly."
        })
    
    @tokenRequired
    def delete(currentUser, self):
        postedData = request.get_json()
        dataCheck = self.checkDeleteRequest(postedData)

        if(dataCheck == 200): # If the request is OK
            itemName = postedData['name']
        else:
            return dataCheck # If the request is not OK, return the JSON generated by checkDeleteRequest function
        
        itemList = users.find({'username':currentUser})[0]['items'] # Get the list of items of currentUser from database
        
        # Check if item does exist
        if(not next((item for item in itemList if item['name'] == itemName), False)):
            return jsonify({
                "status": 422,
                "msg": "Item doest not exist on the list. If you want to add the item, send a POST request."
            })
        
        # Loop through the users item list and find the item with same name as posted item name
        for i in range(len(itemList)):
            if itemList[i]['name'] == itemName: # If the item name on the list is equal to the item name that is passed with request
                del itemList[i] # Delelete that item from item list
                break # Break the loop
        
        # Update the users item list with the new list of items
        users.update(
            {'username':currentUser},
            {'$set':{'items': itemList}}
        )

        return jsonify({
            "status": 200,
            "msg": "Item has been deleted successfuly."
        })
        
    def checkDeleteRequest(self, postedData):
        if(not 'name' in postedData): # If the name of the item to be deleted is not passed
            return jsonify({
                "status": 412,
                "msg": "Item name is missing."
            })
        
        return 200        

    def checkPutRequest(self, postedData):
        if(not 'name' in postedData): # If name is not passed with request
            return jsonify({
                "status": 412,
                "msg": "Item name is missing."
            })
        elif(not ('new-name' in postedData or 'count' in postedData or 'description' in postedData)): # If at-least one of the following is not passed with request: new-name, count, description then there is no filed to be updated
            return jsonify({
                "status": 412,
                "msg": "You should send at least one field to update (new-name, count or description)"
            })
        else:
            if('count' in postedData): # If count is passed with request
                try: # try to convert count to integer
                    int(postedData['count'])
                except: # If it is not convertable to integer
                    return jsonify({
                        "status": 412,
                        "msg": "Item count has to be a number."
                    })                

        return 200

    def checkPostRequest(self, postedData):
        if(not 'name' in postedData): # If name is not passed with request
            return jsonify({
                "status": 412,
                "msg": "Item name is missing."
            })
        elif(not 'count' in postedData): # If count is not passed with request
            return jsonify({
                "status": 412,
                "msg": "Item count is missing."
            })
        elif(not 'description' in postedData): # If description is not passed with request
            return jsonify({
                "status": 412,
                "msg": "Item description is missing"
            })
        else:
            try: # try to convert count to integer
                int(postedData['count'])
            except: # If it is not convertable to integer
                return jsonify({
                    "status": 412,
                    "msg": "Item count has to be a number."
                })
        
        return 200

api.add_resource(Register, "/register")
api.add_resource(GetItems, "/getItems")
api.add_resource(Login, "/login")
api.add_resource(Items, "/items")

if(__name__ == "__main__"):
    app.run(host="0.0.0.0")